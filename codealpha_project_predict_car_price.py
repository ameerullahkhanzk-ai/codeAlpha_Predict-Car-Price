# -*- coding: utf-8 -*-
"""codealpha_Project_Predict Car Price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Lfu711rMT_Hdf-p3T8x_vsHRGnG9ech

**Step 1: Install & Import Libraries**
"""

# Import the basic libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# For machine learning
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""**Step 2: Load the Datase**"""

# Load the CSV file
df = pd.read_csv('/content/car data.csv')
df.head()

"""**Step 3: Understand Your Data (EDA)**

"""

# Check basic info
print(df.info())

# Show column names
print(df.columns)

# Check for missing values
print(df.isnull().sum())

df.shape

df.columns

"""**Step 4: Clean and Preprocess the Data**"""

df.drop(['Car_Name'], axis=1, inplace=True)
df.head()

'''df['fuel'] = df['fuel'].map({'Petrol': 0, 'Diesel': 1, 'CNG': 2})
df['seller_type'] = df['seller_type'].map({'Individual': 0, 'Dealer': 1, 'Trustmark Dealer': 2})
df['transmission'] = df['transmission'].map({'Manual': 0, 'Automatic': 1})'''
df['Fuel_Type'].value_counts()

df['Fuel_Type']=df['Fuel_Type'].map({'Petrol':0,'Diesel':1,'CNG':2})
df

df['Selling_type'].value_counts()

df['Selling_type']=df['Selling_type'].map({'Individual':0,'Dealer':1,'Trustmark Dealer':2})
df

df['Transmission'].value_counts()

df['Transmission']=df['Transmission'].map({'Manual':0,'Automatic':1})
df

"""**Step 5: Split Data into Train and Test Sets**"""

# Define features and label
X = df.drop('Selling_Price', axis=1)  # all except price
y = df['Selling_Price']  # price

# Split into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Step 6: Train a Regression Model**"""

# Use Linear Regression (you can later try Random Forest or others)
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)
y_pred[:7]

"""**Step 7: Evaluate the Model**"""

# Check model performance
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared Score:", r2)

"""**Step 8: Visualize Results**"""

# Actual vs Predicted Price
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.5, color='blue')
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Car Prices")
plt.grid(True)
plt.show()